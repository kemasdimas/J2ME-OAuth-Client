To test this library, create a MIDLet named "BrowserTest" and paste the following code

/*
 * Fire is a fast, themable UI toolkit and xHTML/CSS renderer for mobile application
 * and game development. It is an eye-candy alternative to the standard midp2 UI
 * components and unlike them it produces a superior UI result on all mobile devices!
 *
 * Copyright (C) 2006,2007,2008,2009,2010 Pashalis Padeleris (padeler at users.sourceforge.net)
 *
 * This file is part of Fire.
 *
 * Fire is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Fire is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with Fire.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
import com.tccoder.j2me.client.TwitterClient;
import gr.fire.browser.Browser;
import gr.fire.browser.util.Page;
import gr.fire.browser.util.PageListener;
import gr.fire.core.CommandListener;
import gr.fire.core.Component;
import gr.fire.core.Container;
import gr.fire.core.FireScreen;
import gr.fire.core.Panel;
import gr.fire.core.SplashScreen;
import gr.fire.ui.InputComponent;
import gr.fire.util.Log;

import java.io.IOException;
import java.util.Hashtable;

import javax.microedition.io.HttpConnection;
import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.Displayable;
import javax.microedition.midlet.MIDlet;
import javax.microedition.midlet.MIDletStateChangeException;
import net.oauth.j2me.BadTokenStateException;
import net.oauth.j2me.OAuthServiceProviderException;

/**
 * This application demonstrates the use of the Browser to access remote and local web pages.
 * You can also find code samples on:
 * <ul>
 * <li>the use of Alerts and the FireScreen.showAlert() method.</li>
 * <li>How to create and display custom animations.</li>
 * <li>How to use the Console</li>
 * <li>How to show a popup menu</li>
 * <li>How to show a splash screen</li>
 * <li>How to use the gr.fire.browser.util.Command class to load pages</li>
 * </ul>
 *
 *
 * @see SpriteAnimation
 * @see SplashScreen
 * @see Console
 *
 * @author padeler
 *
 */
public class BrowserTest extends MIDlet implements PageListener, CommandListener {
    private TwitterClient twitterOAuth = TwitterClient.getInstance();

    private Browser b;
    private FireScreen fireScreen;

    protected void pauseApp() {
    }

    protected void startApp() throws MIDletStateChangeException {
        try {
            // First create a splash screen.
            // Displaying a slash screen apart from been a good practice to notify the user
            // that the application is loading, also helps to avoid an annoing bug on some phones
            // that cannot switch to fullscreen canvas if there not a canvas already on the screen
            Display disp = Display.getDisplay(this);
            
            // now continue with the application initialization.
            fireScreen = FireScreen.getScreen(Display.getDisplay(this));
            fireScreen.setFullScreenMode(true);

            // set the theme. The theme can be stored either locally or remotely accesible via http
//            FireScreen.setTheme(new FireTheme("file://theme.properties"));

            b = new Browser();
            b.getHttpClient().loadCookies("testingcookies");

            b.setListener(this);
            b.setPageListener(this);

            showMainMenu(); // load the main menu.
            
        } catch(Throwable e) {
            Log.logError("Application Failed to start",e);
        }
    }

    private void showMainMenu() {
        try {
            twitterOAuth.fetchNewRequestToken();
            final String authUrl = twitterOAuth.getAuthorizeUrl();

            System.out.println("[AUTH URL] " + authUrl);

            Page p = b.loadPage(authUrl, HttpConnection.GET, null, null); // this will load the first screen.
            Container c = p.getPageContainer(); // the page is rendered in a container

            // create a panel for the container
            Panel mainPanel = new Panel(c, Panel.VERTICAL_SCROLLBAR | Panel.HORIZONTAL_SCROLLBAR, true);
            fireScreen.setCurrent(mainPanel);
        } catch(Exception e) {
            Log.logError("Failed to load main page.",e);
        }
    }

    /**
     * This method is called by the Browser when a request made with loadPageAsync completes.
     */
    public void pageLoadCompleted(String url, String method, Hashtable requestParams, Page page)
    {
            // Use the of the log class
            Log.logInfo("Loading of URL["+url+"] completed.");

            b.pageLoadCompleted(url,method,requestParams,page);
    }

    /**
     * This method is called by the Browser when a request using loadPageAsync failes with an Exception (or Error)
     *
     */
    public void pageLoadFailed(String url, String method, Hashtable requestParams, Throwable error)
    {
        if (!url.startsWith(TwitterClient.CALLBACK_URL)) {

            // Use the of the log class
            Log.logError("Loading of URL["+url+"] failed with error.",error);

            b.pageLoadFailed(url,method,requestParams,error);
        }
    }

    protected void destroyApp(boolean arg0) throws MIDletStateChangeException
    {
        try{
            // The HttpClient will store the Cookies loaded while communicating with Http server
            // in memory. The developer can choose to persist this cookies using the HttpClient.storeCookies() method.
            // this method will create a record-store with the given name and serialize the cookies in it.
            // Cookies stored using this method can be later loaded using the HttpClient.loadCookies() method.
            b.getHttpClient().storeCookies("testingcookies");
            FireScreen.getScreen().destroy(); // notify firescreen that the application will close.
            // This will also stop the animation thread.
        } catch(IOException e) {
            Log.logError("Failed to store cookies",e);
        }
    }

    public void pageLoadProgress(String url,String message, byte state, int percent) {
        System.out.println("[LOADING URL] " + url);

        if (state == PageListener.PAGE_LOAD_START && url.startsWith(TwitterClient.CALLBACK_URL)) {
            System.out.println("PARSING!!!!");
            twitterOAuth.parseAuthorizeResult(url);
            try {
                twitterOAuth.fetchNewAccessToken().getSecret();
//                String res = twitterOAuth.updateStatus("PUT YOUR TEST STATUS HERE");
            } catch (BadTokenStateException ex) {
            } catch (OAuthServiceProviderException ex) {
            } catch (Exception ex) {
            }
        } else {
            b.pageLoadProgress(url,message,state,percent); // use the default implementation for gauge handling.
        }
    }

    public void commandAction(javax.microedition.lcdui.Command cmd, Component c)
    {
        if (c instanceof InputComponent && ((InputComponent) c).getType() == InputComponent.SUBMIT)
        {
            ((gr.fire.browser.util.Command)cmd).getForm().submit((InputComponent) c);
            return;
        }
        
        b.commandAction(cmd,c);
    }

    public void commandAction(Command c, Displayable d) {
    }
}